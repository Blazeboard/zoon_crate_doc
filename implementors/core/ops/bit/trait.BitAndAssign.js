(function() {var implementors = {};
implementors["ppv_lite86"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"ppv_lite86/generic/struct.u32x4_generic.html\" title=\"struct ppv_lite86::generic::u32x4_generic\">u32x4_generic</a>&gt; for <a class=\"struct\" href=\"ppv_lite86/generic/struct.u32x4_generic.html\" title=\"struct ppv_lite86::generic::u32x4_generic\">u32x4_generic</a>","synthetic":false,"types":["ppv_lite86::generic::u32x4_generic"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"ppv_lite86/generic/struct.u64x2_generic.html\" title=\"struct ppv_lite86::generic::u64x2_generic\">u64x2_generic</a>&gt; for <a class=\"struct\" href=\"ppv_lite86/generic/struct.u64x2_generic.html\" title=\"struct ppv_lite86::generic::u64x2_generic\">u64x2_generic</a>","synthetic":false,"types":["ppv_lite86::generic::u64x2_generic"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"ppv_lite86/generic/struct.u128x1_generic.html\" title=\"struct ppv_lite86::generic::u128x1_generic\">u128x1_generic</a>&gt; for <a class=\"struct\" href=\"ppv_lite86/generic/struct.u128x1_generic.html\" title=\"struct ppv_lite86::generic::u128x1_generic\">u128x1_generic</a>","synthetic":false,"types":["ppv_lite86::generic::u128x1_generic"]}];
implementors["security_framework"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"security_framework/authorization/struct.Flags.html\" title=\"struct security_framework::authorization::Flags\">Flags</a>&gt; for <a class=\"struct\" href=\"security_framework/authorization/struct.Flags.html\" title=\"struct security_framework::authorization::Flags\">Flags</a>","synthetic":false,"types":["security_framework::authorization::Flags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"security_framework/os/macos/code_signing/struct.Flags.html\" title=\"struct security_framework::os::macos::code_signing::Flags\">Flags</a>&gt; for <a class=\"struct\" href=\"security_framework/os/macos/code_signing/struct.Flags.html\" title=\"struct security_framework::os::macos::code_signing::Flags\">Flags</a>","synthetic":false,"types":["security_framework::os::macos::code_signing::Flags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"security_framework/policy/struct.RevocationPolicy.html\" title=\"struct security_framework::policy::RevocationPolicy\">RevocationPolicy</a>&gt; for <a class=\"struct\" href=\"security_framework/policy/struct.RevocationPolicy.html\" title=\"struct security_framework::policy::RevocationPolicy\">RevocationPolicy</a>","synthetic":false,"types":["security_framework::policy::RevocationPolicy"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.63.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"struct\" href=\"security_framework/trust/struct.TrustOptions.html\" title=\"struct security_framework::trust::TrustOptions\">TrustOptions</a>&gt; for <a class=\"struct\" href=\"security_framework/trust/struct.TrustOptions.html\" title=\"struct security_framework::trust::TrustOptions\">TrustOptions</a>","synthetic":false,"types":["security_framework::trust::TrustOptions"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()